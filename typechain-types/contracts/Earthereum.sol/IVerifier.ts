/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Pairing {
  export type G1PointStruct = { X: BigNumberish; Y: BigNumberish };

  export type G1PointStructOutput = [X: bigint, Y: bigint] & {
    X: bigint;
    Y: bigint;
  };

  export type G2PointStruct = {
    X: [BigNumberish, BigNumberish];
    Y: [BigNumberish, BigNumberish];
  };

  export type G2PointStructOutput = [
    X: [bigint, bigint],
    Y: [bigint, bigint]
  ] & { X: [bigint, bigint]; Y: [bigint, bigint] };
}

export declare namespace Types {
  export type ProofStruct = {
    a: Pairing.G1PointStruct;
    b: Pairing.G2PointStruct;
    c: Pairing.G1PointStruct;
  };

  export type ProofStructOutput = [
    a: Pairing.G1PointStructOutput,
    b: Pairing.G2PointStructOutput,
    c: Pairing.G1PointStructOutput
  ] & {
    a: Pairing.G1PointStructOutput;
    b: Pairing.G2PointStructOutput;
    c: Pairing.G1PointStructOutput;
  };
}

export interface IVerifierInterface extends Interface {
  getFunction(nameOrSignature: "verifyTx"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyTx",
    values: [
      Types.ProofStruct,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "verifyTx", data: BytesLike): Result;
}

export interface IVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): IVerifier;
  waitForDeployment(): Promise<this>;

  interface: IVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyTx: TypedContractMethod<
    [
      arg0: Types.ProofStruct,
      arg1: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyTx"
  ): TypedContractMethod<
    [
      arg0: Types.ProofStruct,
      arg1: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
